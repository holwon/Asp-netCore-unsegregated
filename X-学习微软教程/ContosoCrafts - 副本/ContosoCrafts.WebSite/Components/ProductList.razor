@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

@*这种东西应该在_Layout.cshtml添加*@
@*<link rel="stylesheet" href="../wwwroot/lib/bootstrap/dist/css/bootstrap.min.css" />*@
<div class="card-columns">
  @foreach (var product in ProductService.GetProducts())
  {
    <div class="card">
      <div class="card-img" style="background-image: url('@product.Image')"></div>
      <div class="card-body">
        <h5 class="card-title">@product.Title</h5>
      </div>

      <div class="card-footer">
        <small class="text-muted">
          <button @onclick="(e => SelectProduct(product.Id))" data-toggle="modal" data-target="#productModal"
          class="btn btn-primary">
            More Info
          </button>
          @* <!-- <TelerikToggleButton @bind-Selected="@Selected">Text</TelerikToggleButton> --> *@
        </small>
      </div>
    </div>
  }
</div>
<!-- font-awesome-star.html  -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@if (selectedProduct != null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">
              <p class="card-text">@selectedProduct.Description</p>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          @if (voteCount == 0)
          {
            <span>Be the first to vote!(滑稽🥵🥵🥵)</span>
          }
          else
          {
            <span>@voteCount</span>
          }

          @for (int i = 1; i < 6; i++)
          {
            int currentStart = i;
            if (i <= currentRating)
            {
              <span class="fa-star fa checked" @onclick="(e=>SubmitRating(currentStart))"></span>
            }
            else
            {
              <span class="fa-star fa" @onclick="(e=>SubmitRating(currentStart))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

@code {
  Product selectedProduct;
  string selectProductId;

  string test;

  void SelectProduct(string productId)
  {
    selectProductId = productId;
    selectedProduct = ProductService.GetProducts().FirstOrDefault(p => p.Id == productId);
    GetCurrentRating();
  }


  int currentRating = 0;// 平均评分
  int voteCount = 0;
  bool isVotes;// 是否多人评分

  // 这里虽然是GET的方法, 但是用的是void. 原因是此Method只是方便debug的时候查看变量
  void GetCurrentRating()
  {
    var i = new int[0];
    if (selectedProduct.Ratings == null || selectedProduct.Ratings.Any(x => x == null))
    {
      currentRating = 0;
      voteCount = 0;
    }
    else
    {
      voteCount = selectedProduct.Ratings.Count();
      isVotes = voteCount > 1;
      currentRating = selectedProduct.Ratings.Sum() / voteCount;

      // 比如这里就可以添加断点, 进行调试查看变量
      Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }
  }
  void SubmitRating(int rating)
  {
    Console.WriteLine($"Rating received(收到) for {selectedProduct.Id}: {rating}");
    ProductService.AddRating(selectProductId, rating);
    SelectProduct(selectProductId);
  }
}
